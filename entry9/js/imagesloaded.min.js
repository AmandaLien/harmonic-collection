/*!
 * imagesLoaded v3.1.4
 * JavaScript is all like "You images are done yet or what?"
 * MIT License
 */

(function (root, factory) {
    if (typeof define === "function" && define.amd) {
      define(["eventEmitter/EventEmitter", "eventie/eventie"], function (
        EventEmitter,
        eventie
      ) {
        return factory(root, EventEmitter, eventie);
      });
    } else {
      if (typeof exports === "object") {
        module.exports = factory(root, require("eventEmitter"), require("eventie"));
      } else {
        root.imagesLoaded = factory(root, root.EventEmitter, root.eventie);
      }
    }
  })(this, function factory(global, EventEmitter, eventie) {
    var jQuery = global.jQuery;
    var console = global.console;
    var hasConsole = typeof console !== "undefined";
  
    function extend(obj, source) {
      for (var prop in source) {
        obj[prop] = source[prop];
      }
      return obj;
    }
  
    var toString = Object.prototype.toString;
  
    function isArray(obj) {
      return toString.call(obj) === "[object Array]";
    }
  
    function makeArray(obj) {
      if (isArray(obj)) {
        return obj;
      } else {
        if (typeof obj.length === "number") {
          var array = [];
          for (var i = 0; i < obj.length; i++) {
            array.push(obj[i]);
          }
          return array;
        } else {
          return [obj];
        }
      }
    }
  
    function ImagesLoaded(elem, options, callback) {
      if (!(this instanceof ImagesLoaded)) {
        return new ImagesLoaded(elem, options);
      }
  
      if (typeof elem === "string") {
        elem = document.querySelectorAll(elem);
      }
  
      this.elements = makeArray(elem);
      this.options = extend({}, this.options);
  
      if (typeof options === "function") {
        callback = options;
      } else {
        extend(this.options, options);
      }
  
      if (callback) {
        this.on("always", callback);
      }
  
      this.getImages();
  
      if (jQuery) {
        this.jqDeferred = new jQuery.Deferred();
      }
  
      var self = this;
      setTimeout(function () {
        self.check();
      });
    }
  
    ImagesLoaded.prototype = new EventEmitter();
  
    ImagesLoaded.prototype.options = {};
  
    ImagesLoaded.prototype.getImages = function () {
      this.images = [];
      for (var i = 0; i < this.elements.length; i++) {
        var elem = this.elements[i];
        if (elem.nodeName === "IMG") {
          this.addImage(elem);
        }
        var childImgs = elem.querySelectorAll("img");
        for (var j = 0; j < childImgs.length; j++) {
          var childImg = childImgs[j];
          this.addImage(childImg);
        }
      }
    };
  
    ImagesLoaded.prototype.addImage = function (img) {
      var loadingImage = new LoadingImage(img);
      this.images.push(loadingImage);
    };
  
    ImagesLoaded.prototype.check = function () {
      var self = this;
      var progress = 0;
      var imagesCount = this.images.length;
      this.hasAnyBroken = false;
  
      if (!imagesCount) {
        this.complete();
        return;
      }
  
      function onConfirm(image, message) {
        if (self.options.debug && hasConsole) {
          console.log("confirm", image, message);
        }
  
        self.progress(image);
        progress++;
        if (progress === imagesCount) {
          self.complete();
        }
        return true;
      }
  
      for (var i = 0; i < imagesCount; i++) {
        var image = this.images[i];
        image.on("confirm", onConfirm);
        image.check();
      }
    };
  
    ImagesLoaded.prototype.progress = function (image) {
      this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
      var self = this;
      setTimeout(function () {
        self.emit("progress", self, image);
        if (self.jqDeferred && self.jqDeferred.notify) {
          self.jqDeferred.notify(self, image);
        }
      });
    };
  
    ImagesLoaded.prototype.complete = function () {
      var eventName = this.hasAnyBroken ? "fail" : "done";
      this.isComplete = true;
      var self = this;
      setTimeout(function () {
        self.emit(eventName, self);
        self.emit("always", self);
        if (self.jqDeferred) {
          var deferredEvent = self.hasAnyBroken ? "reject" : "resolve";
          self.jqDeferred[deferredEvent](self);
        }
      });
    };
  
    if (jQuery) {
      jQuery.fn.imagesLoaded = function (options, callback) {
        var instance = new ImagesLoaded(this, options, callback);
        return instance.jqDeferred.promise(jQuery(this));
      };
    }
  
    function LoadingImage(img) {
      this.img = img;
    }
  
    LoadingImage.prototype = new EventEmitter();
  
    LoadingImage.prototype.check = function () {
      var cached = cache[this.img.src] || new Cache(this.img.src);
  
      if (cached.isConfirmed) {
        this.confirm(cached.isLoaded, "cached was confirmed");
        return;
      }
  
      if (this.img.complete && this.img.naturalWidth !== undefined) {
        this.confirm(this.img.naturalWidth !== 0, "naturalWidth");
        return;
      }
  
      var self = this;
  
      cached.on("confirm", function (cache, message) {
        self.confirm(cache.isLoaded, message);
        return true;
      });
  
      cached.check();
    };
  
    LoadingImage.prototype.confirm = function (isLoaded, message) {
      this.isLoaded = isLoaded;
      this.emit("confirm", this, message);
    };
  
    var cache = {};
  
    function Cache(src) {
      this.src = src;
      cache[src] = this;
    }
  
    Cache.prototype = new EventEmitter();
  
    Cache.prototype.check = function () {
      if (this.isChecked) {
        return;
      }
  
      var image = new Image();
      eventie.bind(image, "load", this);
      eventie.bind(image, "error", this);
      image.src = this.src;
      this.isChecked = true;
    };
  
    Cache.prototype.handleEvent = function (event) {
      var method = "on" + event.type;
      if (this[method]) {
        this[method](event);
      }
    };
  
    Cache.prototype.onload = function (event) {
      this.confirm(true, "onload");
      this.unbindProxyEvents(event);
    };
  
    Cache.prototype.onerror = function (event) {
      this.confirm(false, "onerror");
      this.unbindProxyEvents(event);
    };
  
    Cache.prototype.confirm = function (isLoaded, message) {
      this.isConfirmed = true;
      this.isLoaded = isLoaded;
      this.emit("confirm", this, message);
    };
  
    Cache.prototype.unbindProxyEvents = function (event) {
      eventie.unbind(event.target, "load", this);
      eventie.unbind(event.target, "error", this);
    };
  
    return ImagesLoaded;
});